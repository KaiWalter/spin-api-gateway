# Rust Development Guidelines

## Code Standards
- All Rust code uses 2021 edition and should be formatted with `rustfmt`
- Use `cargo fmt` for code formatting
- Follow existing patterns in [api1/src/lib.rs](mdc:api1/src/lib.rs) and [api2/src/lib.rs](mdc:api2/src/lib.rs)

## Build Commands
```bash
# Build all Rust crates
cargo build --workspace

# Build specific Wasm API components
cargo build -p api1 -p api2 --target wasm32-wasip2

# Run gateway (native)
cargo run -p api-gateway
```

## WIT Integration
- WIT interfaces are versioned and shared in the [wit/](mdc:wit/) directory
- Use `cargo-component` for Wasm builds and Spin integration
- New API components should be added as workspace members in [Cargo.toml](mdc:Cargo.toml)
- For WIT interface changes, ensure compatibility across all components

## Adding New Rust API Components
1. Create a new crate directory (e.g., `api3/`)
2. Add to workspace in root [Cargo.toml](mdc:Cargo.toml)
3. Define WIT interface in [wit/](mdc:wit/) if needed
4. Build with `cargo build -p api3 --target wasm32-wasip2`
5. Update [routes.json](mdc:routes.json) to route requests to the new component
6. Restart the gateway to pick up new routes
description:
globs:
alwaysApply: false
---
