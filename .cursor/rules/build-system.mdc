# Build System & Development Environment

## Nix Development Environment
The project uses Nix for reproducible development environments:
- [flake.nix](mdc:flake.nix) - Nix devShell and toolchain setup
- Environment variables for OpenSSL are configured in [flake.nix](mdc:flake.nix) for compatibility
- Provides all required tools: Rust, Spin, Wasm tools, Node.js, etc.

## Build Commands
```bash
# Enter Nix devShell with all tools
nix develop

# Build all Rust crates
cargo build --workspace

# Build specific Wasm API components
cargo build -p api1 -p api2 --target wasm32-wasip2

# Build JS component
cd api-js && npm run build

# Run gateway (native)
cargo run -p api-gateway
```

## Makefile Shortcuts
The [Makefile](mdc:Makefile) provides build shortcuts for all components.

## Toolchain Configuration
- [rust-toolchain.toml](mdc:rust-toolchain.toml) - Rust toolchain specification
- [Cargo.toml](mdc:Cargo.toml) - Root workspace configuration
- [Cargo.lock](mdc:Cargo.lock) - Dependency lock file

## Key Dependencies
- Fermyon Spin, Wasmtime, Wasm tools
- GitHub CLI, OpenSSL (via Nix)
- Node.js for JS plugins
- `cargo-component` for Wasm builds
description:
globs:
alwaysApply: false
---
